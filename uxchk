#!/bin/bash
# douglas.diaz@bcr.gob.sv
# Feb-2023

readonly NMS=172.16.99.144
readonly HOSTNAME=`hostname`
readonly CURL_PARAMS="-G --connect-timeout 5 --retry 3"


date > /tmp/na_alerts.rpt
date > /tmp/boot_alerts.rpt
date > /tmp/phy_alerts.rpt
date > /tmp/cpu_alerts.rpt
date > /tmp/mem_alerts.rpt
date > /tmp/dsk_alerts.rpt
date > /tmp/io_alerts.rpt
date > /tmp/time_alerts.rpt
date > /tmp/proc_alerts.rpt
date > /tmp/vm_alerts.rpt
date > /tmp/pg_alerts.rpt
date > /tmp/err_alerts.rpt 

let tS=`wc -l < $1`
let naAlmCtr=bootAlmCtr=phyAlmCtr=cpuAlmCtr=memAlmCtr=dskAlmCtr=ioAlmCtr=timeAlmCtr=vmAlmCtr=pgAlmctr=errAlmCtr=0

while IFS=  read -r line; do
	myCred=( $line )
	#echo  ${myCred[0]}
	#echo  ${myCred[1]}
	#echo  ${myCred[2]}

	nc -w 3 -z "${myCred[3]}" 22
	if [ $? -ne 0  ]; then
		echo "${myCred[3]} ${myCred[0]} unreachable" >> /tmp/na_alerts.rpt
		(( naAlmCtr=naAlmCtr+1 ))
		continue
	fi

	echo "# ${myCred[3]} ${myCred[0]} ========================================"
	OS_type=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'uname'`
	hostName=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'hostname'`


	# Common checks ######################################################################################################################
	cmdOut=`sshpass -p "${myCred[2]}" ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 "${myCred[1]}"@"${myCred[3]}" 'uptime 2>/dev/null'`
	echo "$cmdOut" | grep up | grep -q day
	exitStat=$?
	if [ -n "$cmdOut" ] && [ "$exitStat" -ne 0 ]; then
		echo "# ${myCred[3]} ${myCred[0]} uptime ========================================" >> /tmp/boot_alerts.rpt
		echo "$cmdOut" >> /tmp/boot_alerts.rpt

		(( bootAlmCtr=bootAlmCtr+1 ))
		bootAlmLst="$hostName, $bootAlmLst"

	fi

	cmdOut=`sshpass -p "${myCred[2]}" ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 "${myCred[1]}"@"${myCred[3]}" 'df -k 2>/dev/null'`
	echo "$cmdOut" | grep -Ev 'loop|snap|docker|media' | grep -Eq '100%|9[0-9]%|[8][5-9]%'
	exitStat=$?
	if [ -n "$cmdOut" ] && [ "$exitStat" -eq 0 ]; then
		echo "# ${myCred[3]} ${myCred[0]} df ========================================" >> /tmp/dsk_alerts.rpt
		echo "$cmdOut" >> /tmp/dsk_alerts.rpt

		(( dskAlmCtr=dskAlmCtr+1 ))
		dskAlmLst="$hostName, $dskAlmLst"
	fi

        # journalctl -p crit
        cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "egrep -i 'kernel|crit|OOM-killer|Out of memory|Killed process|segfault|fork' /var/log/syslog /var/log/messages /var/adm/messages /var/adm/ras/errlog 2>/dev/null | egrep -v 'sendmail|UFW|named|audit|loop|kex alg|key exchange algorithm'"`
        if [ -n "$cmdOut" ]; then
                 echo "# ${myCred[3]} ${myCred[0]} system logs ========================================" >> /tmp/err_alerts.rpt
                 echo "$cmdOut" >> /tmp/err_alerts.rpt

                 (( errAlmCtr=errAlmCtr+1 ))
                 errAlmLst="$hostName, $errAlmLst"
        fi


	# Specific check per OS type ##############################################################################################################
	if [[ "$OS_type" == "linux-gnu"* ]]; then
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'top -b -n 1 | grep Cpu'`
		if [ -n "$cmdOut" ]; then
			idle=`echo "$cmdOut" | awk -F',' '{ print $4 }' | awk '{ print $1 }' | awk -F[.,] '{ print $1 }'`
			wio=`echo "$cmdOut" | awk -F',' '{ print $5 }' | awk '{ print $1 }' | awk -F[.,] '{ print $1 }'`

			if [ "$wio" -ge 25 ] || [ "$idle" -le 15 ]; then
				echo "# ${myCred[3]} ${myCred[0]} CPU idle: $idle wio: $wio ========================================" >> /tmp/cpu_alerts.rpt
				echo "$cmdOut" >> /tmp/cpu_alerts.rpt

				(( cpuAlmCtr=cpuAlmCtr+1 ))
				cpuAlmLst="$hostName, $cpuAlmLst"
			fi
		fi


	elif [[ "$OS_type" == "SunOS"* ]]; then
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "sudo /usr/sbin/fmadm faulty"`
                if [ -n "$cmdOut" ] && [ -n "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} fdadm ========================================" >> /tmp/phy_alerts.rpt
                        echo "$cmdOut" >> /tmp/phy_alerts.rpt

			(( phyAlmCtr=phyAlmCtr+1 ))
			phyAlmLst="$hostName, $phyAlmLst"
                fi

		# Adapted from: https://exchange.nagios.org/directory/Plugins/Operating-Systems/Solaris/check_solaris_cpu_usage/details
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} '/usr/bin/mpstat -a 3 2'`
		idle=`echo "$cmdOut" | tail -1 | awk '{ print $16 }'`
		if [ -n "$cmdOut" ] && [ "$idle" -le 15 ]; then
			echo "# ${myCred[3]} ${myCred[0]} mpstat ========================================" >> /tmp/cpu_alerts.rpt
			echo "$cmdOut" >> /tmp/cpu_alerts.rpt
			(( cpuAlmCtr=cpuAlmCtr+1 ))
			cpuAlmLst="$hostName, $cpuAlmLst"
		fi

		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "echo '::memstat' | sudo mdb -k"`
		echo "$cmdOut" | grep -E 'freelist|Free  ' | grep -q ' [0-9]%'
		retVal=$?
		if [ -n "$cmdOut" ] && [ $retVal -eq 0 ]; then
			echo "# ${myCred[3]} ${myCred[0]} mdb ========================================" >> /tmp/mem_alerts.rpt
			echo "$cmdOut" >> /tmp/mem_alerts.rpt

			(( memAlmCtr=memAlmCtr+1 ))
			memAlmLst="$hostName, $memAlmLst"
		fi

		# fmstat -s -m cpumem-retire

		# dladm show-link -s vnet0

		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "sudo iostat -zxn"`
		if [ -n "$cmdOut" ]; then
			echo "$cmdOut" | egrep -q '100%|9[0-9]%|[8][5-9]%'

			if [ $? -eq 0 ]; then
                		echo "# ${myCred[3]} ${myCred[0]} iostat ========================================" >> /tmp/io_alerts.rpt
	        	        echo "$cmdOut" | egrep '100%|9[0-9]%|[8][5-9]%' >> /tmp/io_alerts.rpt

				(( ioAlmCtr=ioAlmCtr+1 ))
				ioAlmLst="$hostName, $ioAlmLst"
			fi
	        fi

		# According to Sun, NTP can only sync time if it is off by no more than 17 minutes.  Furthermore, adjusting time being off by seconds will take several minutes because NTP is architected to slowly adjust to the NTP master's time. 
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "/usr/sbin/ntpq -c peers"`
		if [ -z "$cmdOut" ]; then
			echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
			echo 'NTP peers not found/setup here!' >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
			(( timeAlmCtr=timeAlmCtr+1 ))
			timeAlmLst="$hostName, $timeAlmLst"
		else
			offSet=`echo "$cmdOut" | tail -n +3 | awk '/\*/ { print $9 }'`
			if [ -z "$offSet" ]; then
				echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
				echo 'NTP server not eligible here' >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
				(( timeAlmCtr=timeAlmCtr+1 ))
				timeAlmLst="$hostName, $timeAlmLst"
			else
				# Max time difference allowed by a DB RAC node> 30 secs
				if (( $(echo "${offSet//+} < -10.0" | bc -l) )) || (( $(echo "${offSet//+} > 10.0" | bc -l) )); then
					echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
					echo "$cmdOut" >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt

					(( timeAlmCtr=timeAlmCtr+1 ))
					timeAlmLst="$hostName, $timeAlmLst"
				fi
			fi
		fi

                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "sudo ldm list 2> /dev/null"`
                if [ -n "$cmdOut" ]; then
			echo "$cmdOut" | grep -Eqv 'STATE|active'
			exitStat=$?

			if [ "$exitStat" -eq 0 ]; then
	                        echo "# ${myCred[3]} ${myCred[0]} ldm ========================================" >> /tmp/vm_alerts.rpt
        	                echo "$cmdOut" >> /tmp/vm_alerts.rpt

				(( vmAlmCtr=vmAlmCtr+1 ))
				vmAlmLst="$hostName, $vmAlmLst"
			fi
                fi


	elif [[ "$OS_type" == "AIX"* ]]; then
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'errpt -a | grep LABEL'`
                if [ -n "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} errpt ========================================" >> /tmp/phy_alerts.rpt
                        echo "$cmdOut" >> /tmp/phy_alerts.rpt

                        (( phyAlmCtr=phyAlmCtr+1 ))
                        phyAlmLst="$hostName, $phyAlmLst"
                fi


		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "sar -u 1"`
		if [ -z "$cmdOut" ]; then
			wio=`echo "$cmdOut" | awk '{ print $4 }'`
			idle=`echo "$cmdOut" | awk '{ print $5 }'`

			if [ "$wio" > 25  ] || [ "$idle" < 15  ]; then
				echo "# ${myCred[3]} ${myCred[0]} sar ========================================" >> /tmp/cpu_alerts.rpt
				echo "$cmdOut" >> /tmp/cpu_alerts.rpt

				(( cpuAlmCtr=cpuAlmCtr+1 ))
			fi
		fi

		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "svmon -G"`
		memSize=`echo "$cmdOut" | grep memory | tr -s ' ' | cut -d ' ' -f 2`
		mInUse=`echo "$cmdOut" | grep 'in use' | tr -s ' ' | cut -d ' ' -f 3`
		if (( $(echo "$mInUse / $memSize > 80" | bc -l) )); then
			echo "# ${myCred[3]} ${myCred[0]} svmon ========================================" >> /tmp/mem_alerts.rpt
			echo "$cmdOut" >> /tmp/mem_alerts.rpt

			(( memAlmCtr=memAlmCtr+1 ))
			memAlmLst="$hostName, $memAlmLst"
		fi

		# check the health of paging space
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "lsps -a"`
		pgUse=`echo "$cmdOut" | tail -1 | awk '{ print $5 }'`
                if (( $(echo "$pgUse > 80" | bc -l) )); then
                        echo "# ${myCred[3]} ${myCred[0]} lsps  ========================================" >> /tmp/pg_alerts.rpt
                        echo "$cmdOut" >> /tmp/pg_alerts.rpt

                        (( pgAlmCtr=pgAlmCtr+1 ))
                        pgAlmLst="$hostName, $pgAlmLst"
                fi

		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "lsmpio"`
		echo "$cmdOut" | tail -n +3 | grep -v Enabled
		if [ $? -eq 0  ]; then
			echo "# ${myCred[3]} ${myCred[0]} lsmpio  ========================================" >> /tmp/dsk_alerts.rpt
			echo "$cmdOut" >> /tmp/dsk_alerts.rpt

			(( dskAlmCtr=dskAlmCtr+1 ))
			dskAlmLst="$hostName, $dskAlmLst"
		fi


                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "iostat"`
		wio=`echo "$cmdOut" | head -4 | tail -1 | awk '{ print $6 }'`
                if (( $(echo "$wio > 25" | bc -l) )); then
                        echo "$cmdOut" | egrep -q '100%|9[0-9]%|[8][5-9]%'

                        if [ $? -eq 0 ]; then
                                echo "# ${myCred[3]} ${myCred[0]} iostat ========================================" >> /tmp/io_alerts.rpt
                                echo "$cmdOut" | egrep '100%|9[0-9]%|[8][5-9]%' >> /tmp/io_alerts.rpt

                                (( ioAlmCtr=ioAlmCtr+1 ))
                                ioAlmLst="$hostName, $ioAlmLst"
                        fi
                fi

		# lsvg -o | lsvg -il | grep -i stale
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'lsvg -o | lsvg -il | grep -i stale'`
                if [ -n "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} lsvg ========================================" >> /tmp/dsk_alerts.rpt
                        echo "$cmdOut" >> /tmp/dsk_alerts.rpt

                        (( dskAlmCtr=dskAlmCtr+1 ))
                        dskAlmLst="$hostName, $dskAlmLst"
                fi

                # According to Sun, NTP can only sync time if it is off by no more than 17 minutes.  Furthermore, adjusting time being off by seconds will take several minutes because NTP is architected to slowly adjust to the NTP master's time.
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "/usr/sbin/ntpq -c peers"`
                if [ -z "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
                        echo 'NTP peers not found/setup here!' >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
                        (( timeAlmCtr=timeAlmCtr+1 ))
                        timeAlmLst="$hostName, $timeAlmLst"
                else
                        offSet=`echo "$cmdOut" | tail -n +3 | awk '/\*/ { print $9 }'`
                        if [ -z "$offSet" ]; then
                                echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
                                echo 'NTP server not eligible here' >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
                                (( timeAlmCtr=timeAlmCtr+1 ))
                                timeAlmLst="$hostName, $timeAlmLst"
                        else
                                # Max time difference allowed by a DB RAC node> 30 secs
                                if (( $(echo "${offSet//+} < -10.0" | bc -l) )) || (( $(echo "${offSet//+} > 10.0" | bc -l) )); then
                                        echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt
                                        echo "$cmdOut" >> /tmp/time_alerts_$(date +%Y-%m-%d_%H).rpt

                                        (( timeAlmCtr=timeAlmCtr+1 ))
                                        timeAlmLst="$hostName, $timeAlmLst"
                                fi
                        fi
                fi

		# Process Monitor: Mandatory processes that should be alerted if not running
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "ps -afe | egrep 'syncd|errdemon|inetd|biod|cron|qdaemon|portmap|writesrv' | wc -l"`
                if [ "$cmdOut" -ne 8 ]; then
                        echo "# ${myCred[3]} ${myCred[0]} lsvg ========================================" >> /tmp/proc_alerts.rpt
                        echo "$cmdOut" >> /tmp/proc_alerts.rpt

                        (( procAlmCtr=procAlmCtr+1 ))
                        procAlmLst="$hostName, $procAlmLst"
                fi



		#cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'lparstat -i |egrep -i "Online|Maximum" |grep -i Memory'`
		#
	fi
done < $1


#for i in $(ls -1 /tmp/*alerts.rpt); do
#done

MSG=".: $(date +%Y-%m-%d_%H) INFRA STATUS SUMMARY: $1 :."

read -r -d '' DAT << EOM
Total servers checked: $tS

--

Unreachable: $naAlmCtr -- $naAlmLst
Uptime alerts (OS reboot): $bootAlmCtr -- $bootAlmLst
Physical/hw alerts: $phyAlmCtr -- $phyAlmLst
High CPU usage alerts: $cpuAlmCtr -- $cpuAlmLst
High mem usage alerts: $memAlmCtr -- $memAlmLst
Low free disk/vol/storage space alerts: $dskAlmCtr -- $dskAlmLst
I/O performance alerts: $ioAlmCtr -- $ioAlmLst
Time sync alerts: $timeAlmCtr -- $timeAlmLst
VM (LDOM/LPAR) status alerts: $vmAlmCtr -- $vmAlmLst
Page usage alerts: $pgAlmCtr -- $pgAlmLst
System/kernel logged errors: $errAlmCtr -- $errAlmLst

More info: http://172.16.99.144/infra/$(date +%Y-%m-%d_%H)/
EOM

#echo "$DAT"

#[ -z "$DAT" ] || $DAT='...'
[ -z "$MSG" ] || curl $CURL_PARAMS --data-urlencode "from=$HOSTNAME" --data-urlencode "msg=$MSG" --data-urlencode "data=$DAT" "http://$NMS/tbot/tbot.php"

exit 0

