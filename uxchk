#!/bin/bash
# diazdw @ g mail dot com
# Feb-2023
# Mar-2023
# Ago-2023

readonly NMS=172.16.99.144
readonly HOSTNAME=`hostname`
readonly CURL_PARAMS="-G --connect-timeout 5 --retry 3"

workDir=$(date +%Y-%m-%d_%H)
mkdir /tmp/$workDir

date > /tmp/$workDir/na_alerts.rpt
date > /tmp/$workDir/boot_alerts.rpt
date > /tmp/$workDir/fm_alerts.rpt
date > /tmp/$workDir/sys_alerts.rpt
date > /tmp/$workDir/vm_alerts.rpt
date > /tmp/$workDir/cpu_alerts.rpt
date > /tmp/$workDir/mem_alerts.rpt
date > /tmp/$workDir/dsk_alerts.rpt
date > /tmp/$workDir/io_alerts.rpt
date > /tmp/$workDir/net_alerts.rpt
date > /tmp/$workDir/ntp_alerts.rpt
date > /tmp/$workDir/proc_alerts.rpt
date > /tmp/$workDir/pg_alerts.rpt # NoSwpAlm
date > /tmp/$workDir/msg_alerts.rpt
date > /tmp/$workDir/app_alerts.rpt

tDev=`wc -l < $1`
let naAlmCtr=bootAlmCtr=fmAlmCtr=sysAlmCtr=vmAlmCtr=cpuAlmCtr=memAlmCtr=dskAlmCtr=ioAlmCtr=netAlmCtr=ntpAlmCtr=procAlmCtr=pgAlmCtr=noSwpAlmCtr=msgAlmCtr=appAlmCtr=0

while IFS=  read -r line; do
	myCred=( $line )
	#echo  ${myCred[0]} ## Device name
	#echo  ${myCred[1]} ## Username
	#echo  ${myCred[2]} ## Password
	#echo  ${myCred[3]} ## IP addr

	nc -w 3 -z "${myCred[3]}" 22
	if [ $? -ne 0  ]; then
		echo "${myCred[3]} ${myCred[0]} unreachable" >> /tmp/$workDir/na_alerts.rpt
		(( naAlmCtr=naAlmCtr+1 ))
		naAlmLst="${myCred[0]}, $naAlmLst"
		continue
	fi

	OSname=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'uname -a'`
	[[ "$OSname" == *"hmc"* ]] && OSname='hmc' || OSname=`echo "$OSname" | awk '{ print $1 }'`
	echo "# ${myCred[3]} ${myCred[0]} = $OSname ###########################"

        hostName=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'hostname 2>/dev/null'`
        if [ -z "$hostName" ]; then
		hostName=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'cat /etc/hostname'`
	fi
        if [ -z "$hostName" ]; then
		hostName=${myCred[0]}
	fi


	if [ "$OSname" != "hmc" ]; then
		# Common checks ######################################################################################################################
		cmdOut=`sshpass -p "${myCred[2]}" ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 "${myCred[1]}"@"${myCred[3]}" 'uptime'`
		echo "$cmdOut" | grep up | grep -q day
		if [ $? -ne 0 ] && [ -n "$cmdOut" ]; then
			echo "# ${myCred[3]} ${myCred[0]} uptime ========================================" >> /tmp/$workDir/boot_alerts.rpt
			echo "$cmdOut" >> /tmp/$workDir/boot_alerts.rpt
			(( bootAlmCtr=bootAlmCtr+1 ))
			bootAlmLst="$hostName, $bootAlmLst"
		fi

		cmdOut=`sshpass -p "${myCred[2]}" ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 "${myCred[1]}"@"${myCred[3]}" 'df -k'`
		echo "$cmdOut" | grep -Ev 'loop|snap|docker|media' | grep -Eq '100%|9[0-9]%|[8][6-9]%'
		if [ $? -eq 0 ] && [ -n "$cmdOut" ]; then
			echo "# ${myCred[3]} ${myCred[0]} df ========================================" >> /tmp/$workDir/dsk_alerts.rpt
			echo "$cmdOut" >> /tmp/$workDir/dsk_alerts.rpt
			(( dskAlmCtr=dskAlmCtr+1 ))
			dskAlmLst="$hostName, $dskAlmLst"
		fi

        	# journalctl -p crit
	        cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "egrep -i 'kernel|crit|OOM-killer|Out of memory|Killed process|segfault|fork|temperature|shutdown|service-required|powered down' /var/log/syslog /var/log/messages /var/adm/messages /var/adm/ras/errlog 2>/dev/null | egrep -v 'sendmail|UFW|named|audit|loop|kex alg|key exchange algorithm|Log statistics|Reached target Shutdown'"`
        	if [ -n "$cmdOut" ]; then
                	 echo "# ${myCred[3]} ${myCred[0]} system logs ========================================" >> /tmp/$workDir/msg_alerts.rpt
	                 echo "$cmdOut" >> /tmp/$workDir/msg_alerts.rpt
	                 (( msgAlmCtr=msgAlmCtr+1 ))
        	         msgAlmLst="$hostName, $msgAlmLst"
	        fi
	fi


	# Specific check per OS type ####################################################################################################################
	if [[ "${OSname,,}" =~ "linux" ]]; then
		# freeipmi

		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'top -b -n 1 | grep Cpu'`
		idle=`echo "$cmdOut" | awk -F',' '{ print $4 }' | awk '{ print $1 }' | awk -F[.,] '{ print $1 }'`
		wio=`echo "$cmdOut" | awk -F',' '{ print $5 }' | awk '{ print $1 }' | awk -F[.,] '{ print $1 }'`

		if [ "$wio" -gt 25 ] || [ "$idle" -lt 15 ]; then
			echo "# ${myCred[3]} ${myCred[0]} top idle: $idle wio: $wio ========================================" >> /tmp/$workDir/cpu_alerts.rpt
			echo "$cmdOut" >> /tmp/$workDir/cpu_alerts.rpt

			(( cpuAlmCtr=cpuAlmCtr+1 ))
			cpuAlmLst="$hostName, $cpuAlmLst"
		fi

		# free -m
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'cat /proc/meminfo'`

		tVal=`echo "$cmdOut" | awk '/MemFree/ { print $2 }'`
		if [ "$tVal" -lt 1024 ]; then
                        echo "# ${myCred[3]} ${myCred[0]} meminfo ========================================" >> /tmp/$workDir/cpu_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/mem_alerts.rpt
                        (( memAlmCtr=memAlmCtr+1 ))
                        memAlmLst="$hostName, $memAlmLst"

		fi

		swapTotal=`echo "$cmdOut" | awk '/SwapTotal/ { print $2 }'`
		if [ "$swapTotal" -eq 0 ]; then
			(( noSwpAlmCtr=noSwpAlmCtr+1 ))
			noSwpAlmLst="$hostName, $noSwpAlmLst"
		else
			swapFree=`echo "$cmdOut" | awk '/SwapFree/ { print $2 }'`
        	        if (( $(echo "1 - $swapFree / $swapTotal > 0.5" | bc -l) )); then
                	        echo "# ${myCred[3]} ${myCred[0]} swap ========================================" >> /tmp/$workDir/pg_alerts.rpt
                        	echo "$cmdOut" >> /tmp/$workDir/pg_alerts.rpt
	                        (( pgAlmCtr=pgAlmCtr+1 ))
        	                pgAlmLst="$hostName, $pgAlmLst"
	                fi
		fi


                cmdOut=`sshpass -p "${myCred[2]}" ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 "${myCred[1]}"@"${myCred[3]}" 'df -i'`
                echo "$cmdOut" | grep -Ev 'loop|snap|docker|media' | grep -Eq '100%|9[0-9]%|[8][6-9]%'
                if [ $? -eq 0 ] && [ -n "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} df ========================================" >> /tmp/$workDir/dsk_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/dsk_alerts.rpt
                        (( dskAlmCtr=dskAlmCtr+1 ))
                        dskAlmLst="$hostName, $dskAlmLst"
                fi


	# Mostly based on https://www.brendangregg.com/USEmethod/use-solaris.html
	elif [[ "$OSname" == "SunOS"* ]]; then
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "sudo /usr/sbin/fmadm faulty"`
                if [ -n "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} fdadm ========================================" >> /tmp/$workDir/fm_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/fm_alerts.rpt
			(( fmAlmCtr=fmAlmCtr+1 ))
			fmAlmLst="$hostName, $fmAlmLst"
                fi

		# Adapted from: https://exchange.nagios.org/directory/Plugins/Operating-Systems/Solaris/check_solaris_cpu_usage/details
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} '/usr/bin/mpstat -a 3 2'`
		if [ -n "$cmdOut" ]; then
			usrSys=`echo "$cmdOut" | tail -1 | awk '{ print $13+$14 }'`
			idle=`echo "$cmdOut" | tail -1 | awk '{ print $16 }'`
		        if [ "$usrSys" -gt 85 ]  || [ "$idle" -lt 15 ]; then
				echo "# ${myCred[3]} ${myCred[0]} mpstat ========================================" >> /tmp/$workDir/cpu_alerts.rpt
				echo "$cmdOut" >> /tmp/$workDir/cpu_alerts.rpt
				(( cpuAlmCtr=cpuAlmCtr+1 ))
				cpuAlmLst="$hostName, $cpuAlmLst"
			fi
		fi

		# Memory capacity errors
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'sudo /usr/sbin/fmstat -s -m cpumem-retire'`
                tVal=`echo "$cmdOut" | wc -l`
                if [ "$tVal" -gt 1 ]; then
                        echo "# ${myCred[3]} ${myCred[0]} vmstat ========================================" >> /tmp/$workDir/mem_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/mem_alerts.rpt
                        (( memAlmCtr=memAlmCtr+1 ))
                        memAlmLst="$hostName, $memAlmLst"
                fi

		# Memory capacity saturation
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} '/usr/bin/vmstat -p'`
                api=`echo "$cmdOut" | tail -1 | awk '{ print $11 }'` # anon page ins == pain
                if [ -n "$cmdOut" ] && [ "$api" -ne 0 ]; then
                        echo "# ${myCred[3]} ${myCred[0]} vmstat ========================================" >> /tmp/$workDir/mem_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/mem_alerts.rpt
                        (( memAlmCtr=memAlmCtr+1 ))
                        memAlmLst="$hostName, $memAlmLst"
                fi

		# RAM usage
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "echo '::memstat' | sudo mdb -k"`
		tVal=`echo "$cmdOut" | grep freelist | awk '{ gsub("%", ""); print $5 }'` # Solaris 11.3
		[ -z "$tVal" ] && tVal=`echo "$cmdOut" | grep '^Free  ' | awk '{ gsub("%", ""); print $4 }'` # Solaris 11.4
		if (( $(echo "$tVal < 15" | bc -l) )); then
			echo "# ${myCred[3]} ${myCred[0]} mdb ========================================" >> /tmp/$workDir/mem_alerts.rpt
			echo "$cmdOut" >> /tmp/$workDir/mem_alerts.rpt
			(( memAlmCtr=memAlmCtr+1 ))
			memAlmLst="$hostName, $memAlmLst"
		fi

                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "swap -s"`
                swapUsed=`echo "$cmdOut" | awk '{ print $9 }' | tr -d k`
		swapFree=`echo "$cmdOut" | awk '{ print $11 }' | tr -d k`
		if (( $(echo "$swapUsed / ($swapUsed + $swapFree) > 0.75" | bc -l) )); then
                        echo "# ${myCred[3]} ${myCred[0]} swap ========================================" >> /tmp/$workDir/pg_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/pg_alerts.rpt
                        (( pgAlmCtr=pgAlmCtr+1 ))
                        pgAlmLst="$hostName, $pgAlmLst"
                fi

		# Storage device I/O utilization (%b), saturation (%w)
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "sudo iostat -zxn"`
		echo "$cmdOut" | egrep -q '100%|9[0-9]%|8[5-9]%'
		if [ $? -eq 0 ] && [ -n "$cmdOut" ]; then
                	echo "# ${myCred[3]} ${myCred[0]} iostat ========================================" >> /tmp/$workDir/io_alerts.rpt
	                echo "$cmdOut" | egrep '100%|9[0-9]%|8[5-9]%' >> /tmp/$workDir/io_alerts.rpt

			(( ioAlmCtr=ioAlmCtr+1 ))
			ioAlmLst="$hostName, $ioAlmLst"
	        fi

		# Storage device I/O errors
		# iostat -En

		# According to Sun, NTP can only sync time if it is off by no more than 17 minutes.  Furthermore, adjusting time being off by seconds will take several minutes because NTP is architected to slowly adjust to the NTP master's time. 
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "/usr/sbin/ntpq -c peers"`
		if [ -z "$cmdOut" ]; then
			echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/$workDir/ntp_alerts.rpt
			echo 'NTP peers not found/setup here!' >> /tmp/$workDir/ntp_alerts.rpt
			(( ntpAlmCtr=ntpAlmCtr+1 ))
			ntpAlmLst="$hostName, $ntpAlmLst"
		else
			offSet=`echo "$cmdOut" | tail -n +3 | awk '/\*/ { print $9 }'`
			if [ -z "$offSet" ]; then
				echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/$workDir/ntp_alerts.rpt
				echo 'NTP server not eligible here' >> /tmp/$workDir/ntp_alerts.rpt
				(( ntpAlmCtr=ntpAlmCtr+1 ))
				ntpAlmLst="$hostName, $ntpAlmLst"
			else
				# Max time difference allowed by a DB RAC node> 30 secs
				if (( $(echo "${offSet//+} < -100.0" | bc -l) )) || (( $(echo "${offSet//+} > 100.0" | bc -l) )); then
					echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/$workDir/ntp_alerts.rpt
					echo "$cmdOut" >> /tmp/$workDir/ntp_alerts.rpt

					(( ntpAlmCtr=ntpAlmCtr+1 ))
					ntpAlmLst="$hostName, $ntpAlmLst"
				fi
			fi
		fi

		# https://docs.oracle.com/cd/E19455-01/806-6612/gld-netstats/index.html
		# nocanputs: Packets without collisions where first transmit attempt was delayed because the medium was busy
		# norcvbuf: Number of times a valid incoming packet was known to have been discarded because no buffer could be allocated for receive
		# noxmtbuf: Packets discarded on output because transmit buffer was busy, or no buffer could be allocated for transmit
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "/usr/bin/kstat | egrep 'nocanputs|defer|norcvbuf|noxmtbuf' | grep -v name | grep -v 0"`
                if [ -n "$cmdOut" ]; then
			echo "# ${myCred[3]} ${myCred[0]} kstat  ========================================" >> /tmp/$workDir/net_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/net_alerts.rpt

                        (( netAlmCtr=netAlmCtr+1 ))
                        netAlmLst="$hostName, $netAlmLst"
                fi

                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'dladm show-link -s 2>/dev/null'`
		echo "$cmdOut" | tail -n +2 | awk '{ print $4" "$7 }' | grep -qv 0
                if [ $? -eq 0 ] && [ -n "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} dladm  ========================================" >> /tmp/$workDir/net_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/net_alerts.rpt

                        (( netAlmCtr=netAlmCtr+1 ))
                        netAlmLst="$hostName, $netAlmLst"
                fi


                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'sudo ldm list 2>/dev/null'`
                echo "$cmdOut" | egrep -qv 'STATE|active'
                if [ $? -eq 0 ] && [ -n "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} ldm ========================================" >> /tmp/$workDir/vm_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/vm_alerts.rpt

                        (( vmAlmCtr=vmAlmCtr+1 ))
                        vmAlmLst="$hostName, $vmAlmLst"
                fi


	####################################
	# Based on http://emmanuel.iffly.free.fr/doku.php?id=aix:hmc_cmd
	elif [[ "$OSname" == "hmc"* ]]; then
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'monhmc -r disk -n 0'`
	        echo "$cmdOut" | egrep -q '100%|9[0-9]%|8[5-9]%'
        	if [ $? -eq 0 ]; then
	                echo "# ${myCred[3]} ${myCred[0]} monhmc ========================================" >> /tmp/$workDir/dsk_alerts.rpt
        	        echo "$cmdOut" >> /tmp/$workDir/dsk_alerts.rpt
                	(( dskAlmCtr=dskAlmCtr+1 ))
	                dskAlmLst="$hostName, $dskAlmLst"
        	fi

		# shows the full name of the managed system
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'lssyscfg -r sys -F name'`
		for i in $cmdOut; do
			# shows the state of the managed system
			cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "lssyscfg -r sys -m $i -F name,state"`
			echo "$cmdOut" | grep -qv Operating
			if [ $? -eq 0 ]; then
				echo "# ${myCred[3]} ${myCred[0]} lssyscfg = $i ========================================" >> /tmp/$workDir/sys_alerts.rpt
				echo "$cmdOut" >> /tmp/$workDir/sys_alerts.rpt
				(( sysAlmCtr=sysAlmCtr+1 ))
				sysAlmLst="$hostName, $sysAlmLst"

			fi

			# shows the state of the lpars of the managed system
			sysName=`echo $i | awk -F, '{ print $1 }'`
			cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "lssyscfg -r lpar -m $sysName -F name,state"`
			echo "$cmdOut" | grep -qv Running
                        if [ $? -eq 0 ]; then
                                echo "# ${myCred[3]} ${myCred[0]} lssyscfg = $i =======================================" >> /tmp/$workDir/vm_alerts.rpt
                                echo "$cmdOut" >> /tmp/$workDir/vm_alerts.rpt
                                (( vmAlmCtr=vmAlmCtr+1 ))
                                vmAlmLst="$hostName, $vmAlmLst"

                        fi
		done

		# check if the lpars have connection with the current HMC
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'lspartition -dlpar'`
		echo "$cmdOut" | grep -v 'Partition:' | grep -qv 'Active:.1'
		if [ $? -eq 0 ]; then
			echo "# ${myCred[3]} ${myCred[0]} lspartition ========================================" >> /tmp/$workDir/vm_alerts.rpt
			echo "$cmdOut" >> /tmp/$workDir/vm_alerts.rpt
			(( vmAlmCtr=vmAlmCtr+1 ))
			vmAlmLst="$hostName, $vmAlmLst"
		fi

                # see what IPs are assigned by the HMC
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'lssysconn -r all'`
                echo "$cmdOut" | grep -qv Connected
                if [ $? -eq 0 ]; then
                        echo "# ${myCred[3]} ${myCred[0]} lsysconn ========================================" >> /tmp/$workDir/sys_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/sys_alerts.rpt
                        (( sysAlmCtr=sysAlmCtr+1 ))
                        sysAlmLst="$hostName, $sysAlmLst"
                fi

                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "lssvcevents -t hardware -d 3 --filter status=open | grep -v 'No results'"`
                if [ -n "$cmdOut"  ]; then
                        echo "# ${myCred[3]} ${myCred[0]} lssvcevents ========================================" >> /tmp/$workDir/fm_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/fm_alerts.rpt
                        (( fmAlmCtr=fmAlmCtr+1 ))
                        fmAlmLst="$hostName, $fmAlmLst"
                fi


	####################################
	elif [[ "$OSname" == "AIX"* ]]; then
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'errpt -a | grep LABEL'`
                if [ -n "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} errpt ========================================" >> /tmp/$workDir/fm_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/fm_alerts.rpt

                        (( fmAlmCtr=fmAlmCtr+1 ))
                        fmAlmLst="$hostName, $fmAlmLst"
                fi


		#cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "sar -u 1 10"`
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'sar -u -P ALL 1 5'`
		usrSysEntc=`echo "$cmdOut" | tail -1 | awk '{ print $2" "$3" "$7 }' | egrep '100|9[0-9]|8[6-9]'`
		wio=`echo "$cmdOut" | tail -1 | awk '{ print $4 }' | egrep '2[5-9]|[3-9][0-9]|100'`
		if [ -n "$usrSysEntc"  ] || [ -n "$wio"  ]; then
			echo "# ${myCred[3]} ${myCred[0]} sar ========================================" >> /tmp/$workDir/cpu_alerts.rpt
			echo "$cmdOut" >> /tmp/$workDir/cpu_alerts.rpt
			(( cpuAlmCtr=cpuAlmCtr+1 ))
			cpuAlmLst="$hostName, $cpuAlmLst"
		fi

		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "svmon -G"`
		memSize=`echo "$cmdOut" | grep memory | tr -s ' ' | cut -d ' ' -f 2`
		mInUse=`echo "$cmdOut" | grep 'in use' | tr -s ' ' | cut -d ' ' -f 3`
		if (( $(echo "$mInUse / $memSize > 0.8" | bc -l) )); then
			echo "# ${myCred[3]} ${myCred[0]} svmon ========================================" >> /tmp/$workDir/mem_alerts.rpt
			echo "$cmdOut" >> /tmp/$workDir/mem_alerts.rpt
			(( memAlmCtr=memAlmCtr+1 ))
			memAlmLst="$hostName, $memAlmLst"
		fi

		# check the health of paging space
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "lsps -a"`
		pgUse=`echo "$cmdOut" | tail -1 | awk '{ print $5 }'`
                if (( $(echo "$pgUse > 70" | bc -l) )); then
                        echo "# ${myCred[3]} ${myCred[0]} lsps  ========================================" >> /tmp/$workDir/pg_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/pg_alerts.rpt
                        (( pgAlmCtr=pgAlmCtr+1 ))
                        pgAlmLst="$hostName, $pgAlmLst"
                fi

                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "swap -s"`
                swapUsed=`echo "$cmdOut" | awk '{ print $7 }'`
                swapFree=`echo "$cmdOut" | awk '{ print $11 }'`
                if (( $(echo "$swapUsed / ($swapUsed + $swapFree) > 0.75" | bc -l) )); then
                        echo "# ${myCred[3]} ${myCred[0]} swap ========================================" >> /tmp/$workDir/pg_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/pg_alerts.rpt
                        (( pgAlmCtr=pgAlmCtr+1 ))
                        pgAlmLst="$hostName, $pgAlmLst"
                fi


		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "lsmpio"`
		echo "$cmdOut" | tail -n +3 | grep -qv Enabled
		if [ $? -eq 0  ]; then
			echo "# ${myCred[3]} ${myCred[0]} lsmpio  ========================================" >> /tmp/$workDir/dsk_alerts.rpt
			echo "$cmdOut" >> /tmp/$workDir/dsk_alerts.rpt
			(( dskAlmCtr=dskAlmCtr+1 ))
			dskAlmLst="$hostName, $dskAlmLst"
		fi

                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "lsdev -Cc disk"`
                echo "$cmdOut" | grep -qv Available
                if [ $? -eq 0  ]; then
                        echo "# ${myCred[3]} ${myCred[0]} lsdev  ========================================" >> /tmp/$workDir/dsk_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/dsk_alerts.rpt
                        (( dskAlmCtr=dskAlmCtr+1 ))
                        dskAlmLst="$hostName, $dskAlmLst"
                fi


                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "iostat"`
		wio=`echo "$cmdOut" | head -4 | tail -1 | awk '{ print $6 }'`
                if (( $(echo "$wio > 25" | bc -l) )); then
                        echo "$cmdOut" | egrep -q '100%|9[0-9]%|8[5-9]%'
                        if [ $? -eq 0 ]; then
                                echo "# ${myCred[3]} ${myCred[0]} iostat wio: $wio ========================================" >> /tmp/$workDir/io_alerts.rpt
                                echo "$cmdOut" | egrep '100%|9[0-9]%|8[5-9]%' >> /tmp/$workDir/io_alerts.rpt
                                (( ioAlmCtr=ioAlmCtr+1 ))
                                ioAlmLst="$hostName, $ioAlmLst"
                        fi
                fi

		# lsvg -o | lsvg -il | grep -i stale
                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'lsvg -o | lsvg -il | grep -i stale'`
                if [ -n "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} lsvg ========================================" >> /tmp/$workDir/dsk_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/dsk_alerts.rpt
                        (( dskAlmCtr=dskAlmCtr+1 ))
                        dskAlmLst="$hostName, $dskAlmLst"
                fi

                cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "/usr/sbin/ntpq -c peers"`
                if [ -z "$cmdOut" ]; then
                        echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/$workDir/ntp_alerts.rpt
                        echo 'NTP peers not found/setup here!' >> /tmp/$workDir/ntp_alerts.rpt
                        (( ntpAlmCtr=ntpAlmCtr+1 ))
                        ntpAlmLst="$hostName, $ntpAlmLst"
                else
                        offSet=`echo "$cmdOut" | tail -n +3 | awk '/\*/ { print $9 }'`
                        if [ -z "$offSet" ]; then
                                echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/$workDir/ntp_alerts.rpt
                                echo 'NTP server not eligible here' >> /tmp/$workDir/ntp_alerts.rpt
                                (( ntpAlmCtr=ntpAlmCtr+1 ))
                                ntpAlmLst="$hostName, $ntpAlmLst"
                        else
                                # Max time difference allowed by a DB RAC node> 30 secs
                                if (( $(echo "${offSet//+} < -100.0" | bc -l) )) || (( $(echo "${offSet//+} > 100.0" | bc -l) )); then
                                        echo "# ${myCred[3]} ${myCred[0]} ntpq ========================================" >> /tmp/$workDir/ntp_alerts.rpt
                                        echo "$cmdOut" >> /tmp/$workDir/ntp_alerts.rpt

                                        (( ntpAlmCtr=ntpAlmCtr+1 ))
                                        ntpAlmLst="$hostName, $ntpAlmLst"
                                fi
                        fi
                fi


		# Process Monitor: Mandatory processes that should be alerted if not running
		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} "ps -afe | egrep 'syncd|errdemon|inetd|biod|cron|qdaemon|portmap|writesrv'"`
		tVal=`echo "$cmdOut" | grep -v grep | wc -l`
		if [ "$tVal" -ne 8 ]; then
                        echo "# ${myCred[3]} ${myCred[0]} ps ========================================" >> /tmp/$workDir/proc_alerts.rpt
                        echo "$cmdOut" >> /tmp/$workDir/proc_alerts.rpt

                        (( procAlmCtr=procAlmCtr+1 ))
                        procAlmLst="$hostName, $procAlmLst"
                fi



		#cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'lparstat -i |egrep -i "Online|Maximum" |grep -i Memory'`

		cmdOut=`sshpass -p ${myCred[2]} ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=3 ${myCred[1]}@${myCred[3]} 'test -f /u01/appserver_logs/lbtr.log && fgrep "Error al generar el Archivo Swift" /u01/appserver_logs/lbtr.log'`
		if [ $? -eq 0  ]; then
			echo "# ${myCred[3]} ${myCred[0]} app log err ========================================" >> /tmp/$workDir/app_alerts.rpt
			echo "$cmdOut" >> /tmp/$workDir/app_alerts.rpt

			(( appAlmCtr=appAlmCtr+1 ))
                        appAlmLst="$hostName, $appAlmLst"
		fi

	fi
done < $1 # Input file format: tsv: devName, usr, passwd, IPaddr


#for i in $(ls -1 /tmp/$workDir/*alerts.rpt); do
#done


MSG=".: $(date +%Y-%m-%d_%HH) - INFRA STATUS - ALERT SUMMARY FOR: $1 :."

read -r -d '' DAT << EOM
Total devices checked: $tDev

--

Unreachable: $naAlmCtr -- $naAlmLst
Short uptime: $bootAlmCtr -- $bootAlmLst
Hw event/fault/err: $fmAlmCtr -- $fmAlmLst
+ HMC recent sys events/issues: $sysAlmCtr -- $sysAlmLst
+ Has LDdom/LPar not active/running: $vmAlmCtr -- $vmAlmLst
High CPU/Entc usage (sys wide avg): $cpuAlmCtr -- $cpuAlmLst
High mem usage: $memAlmCtr -- $memAlmLst
Low free disk/vol/storage space: $dskAlmCtr -- $dskAlmLst
High I/O wait: $ioAlmCtr -- $ioAlmLst
Net packets dropped: $netAlmCtr -- $netAlmLst
NTP/time issues: $ntpAlmCtr -- $ntpAlmLst
AIX vital proc not running: $procAlmCtr -- $procAlmLst
High paging usage: $pgAlmCtr -- $pgAlmLst
No swap setup: $noSwpAlmCtr -- $noSwpAlmLst
Sys/kernel key msg logged: $msgAlmCtr -- $msgAlmLst
App custom errors: $appAlmCtr -- $appAlmLst

More info: http://172.16.99.144/infra/$(date +%Y-%m-%d_%H)/
EOM

#echo "$DAT"

#[ -z "$DAT" ] || $DAT='...'
[ -z "$MSG" ] || curl $CURL_PARAMS --data-urlencode "from=$HOSTNAME" --data-urlencode "msg=$MSG" --data-urlencode "data=$DAT" "http://$NMS/tbot/tbot.php"

exit 0

